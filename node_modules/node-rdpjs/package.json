{
  "name": "node-rdpjs",
  "author": {
    "name": "Sylvain Peyrefitte"
  },
  "version": "0.2.1",
  "engines": [
    "node = 0.10.x"
  ],
  "description": "Remote Desktop Protocol in Node.js",
  "license": "AGPL v3.0",
  "repository": {
    "type": "git",
    "url": "https://github.com/citronneur/node-rdpjs"
  },
  "main": "lib/index.js",
  "dependencies": {
    "bignum": "^0.10.2",
    "starttls": "^1.0.0"
  },
  "readme": "node-rdpjs\n========\n\nRemote Desktop Protocol for Node.js\n\nnode-rdpjs is a pure implementation of the Microsoft RDP (Remote Desktop Protocol) protocol (client and server side). node-rdpjs support only SSL security layer.\n\n## Install\n\nYou can install last release node-rdpjs through npm :\n\n```\nnpm install node-rdpjs\n```\n\nOr work with dev branch :\n\n```\ngit clone https://github.com/citronneur/node-rdpjs.git\ncd node-rdpjs\nnpm install\n```\n\n## RDP Client\n\nTo create a simple rdp client : \n\n```javascript\nvar rdp = require('node-rdpjs');\n\nvar client = rdp.createClient({ \n\tdomain : 'my_domain', \n\tuserName : 'my_username',\n\tpassword : 'my_password',\n\tenablePerf : true,\n\tautoLogin : true,\n\tdecompress : false,\n\tscreen : { width : 800, height : 600 },\n\tlocale : 'en',\n\tlogLevel : 'INFO'\n}).on('connect', function () {\n}).on('close', function() {\n}).on('bitmap', function(bitmap) {\n}).on('error', function(err) {\n}).connect('XXX.XXX.XXX.XXX', 3389);\n```\n\nClient parameters :\n\n* domain {string} Microsoft domain\n* userName {string} Username\n* password {string} password\n* enablePerf {boolean} Active some performance features (disable wallpaper)\n* autoLogin {boolean} start session if login informations are good\n* decompress {boolean} use RLE algorrithm for decompress bitmap\n* screen {object} screen size\n\t- width {integer} width of screen\n\t- height {integer} height of screen\n* locale {string} keyboard layout\n\t- en qwerty layout\n\t- fr azerty layout\n* logLevel {string} console log level of library\n\t- DEBUG\n\t- INFO\n\t- WARN\n\t- ERROR\n\nUse of decompress parameter impact performance.\n\n### Client Events\n\nList of all available events from server\n\n#### connect\n\nConnect event is received when rdp stack is connected\n\n#### close\n\nClose event is received when rdp stack is close cleanly\n\n#### error\n\nError event is received when a protocol error happened\n\n#### bitmap\n\nBitmap event is received for a bitmap refresh order :\n\n* destTop {integer} y min position\n* destLeft {integer} x min position\n* destBottom {integer} y max position\n* destRight {integer} x max position \n* width {integer} width of bitmap data\n* height {integer} height of bitmap data\n* bitsPerPixel {integer} [15|16|24|32] bits per pixel\n* isCompress {boolean} true if bitmap is compressed with RLE algorithm\n* data : {Buffer} bitmap data\n\n### Client Inputs\n\nClient inputs are mainly user inputs (mouse and keyboard).\n\n#### Mouse\n\n```javascript\nclient.sendPointerEvent(x, y, button, isPressed);\n```\n\n* x {integer} mouse x position in pixel\n* y {integer} mouse y position in pixel\n* button {integer} [ 1 (left) | 2 (right) | 3 (middle) ]\n* isPressed {boolean} true for a pressed button event\n\n#### Keyboard\n\n```javascript\nclient.sendKeyEventScancode(code, isPressed);\n```\n\n* code {integer} scancode of key\n* isPressed {boolean} true for a key pressed event\n\n```javascript\nclient.sendKeyEventUnicode(code, isPressed);\n```\n\n* code {integer} unicode char of key\n* isPressed {boolean} true for a key pressed event\n\n## Project\n\nPlease see [**mstsc.js**](https://github.com/citronneur/mstsc.js) project page to watch an example of node-rdpjs.\n\n## Roadmap\n\n* Protocol server side\n* NLA Authentication security layer\n* RDP security layer for windows xp compatibility\n* Win32 orders\n* RemoteFX (H.264) codec\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/citronneur/node-rdpjs/issues"
  },
  "_id": "node-rdpjs@0.2.1",
  "_from": "node-rdpjs@>=0.2.0"
}
