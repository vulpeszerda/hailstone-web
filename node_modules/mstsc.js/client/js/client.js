/*
 * Copyright (c) 2015 Sylvain Peyrefitte
 *
 * This file is part of mstsc.js.
 *
 * mstsc.js is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

(function() {
	/**
	 * Mouse button mapping
	 * @param button {integer} client button number
	 */
	function mouseButtonMap(button) {
		switch(button) {
		case 0:
			return 1;
		case 2:
			return 2;
		default:
			return 0;
		}
	};
	
	/**
	 * Mstsc client
	 * Input client connection (mouse and keyboard)
	 * bitmap processing
	 * @param canvas {canvas} rendering element
	 */
	function Client(canvas) {
		this.canvas = canvas;
		// create renderer
		this.render = new Mstsc.Canvas.create(this.canvas); 
		this.socket = null;
		this.activeSession = false;
		this.install();
	}
	
	Client.prototype = {
		install : function () {
			var self = this,
                isMouseDown = false;

			// bind mouse move event
			this.canvas.addEventListener('mousemove', function (e) {
				if (!self.socket) return;
                if (!isMouseDown) return;
				
				var offset = Mstsc.elementOffset(self.canvas);
                var x = e.clientX - offset.left;
                var y = e.clientY - offset.top;

                if (x < 0 || y < 0) {
                    return;
                }

				self.socket.emit('mouse', x, y, 0, isMouseDown);
				e.preventDefault || !self.activeSession();
				return false;
			});
			this.canvas.addEventListener('mousedown', function (e) {
				if (!self.socket) return;
				
                isMouseDown = true;

				var offset = Mstsc.elementOffset(self.canvas);
                var x = e.clientX - offset.left;
                var y = e.clientY - offset.top;

                if (x < 0 || y < 0) {
                    return;
                }
				self.socket.emit('mouse', x, y, mouseButtonMap(e.button), true);
				e.preventDefault();
				return false;
			});
			this.canvas.addEventListener('mouseup', function (e) {
				if (!self.socket || !self.activeSession) return;

                isMouseDown = false;
				
				var offset = Mstsc.elementOffset(self.canvas);
                var x = e.clientX - offset.left;
                var y = e.clientY - offset.top;

                if (x < 0 || y < 0) {
                    return;
                }
				self.socket.emit('mouse', x, y, mouseButtonMap(e.button), false);
				e.preventDefault();
				return false;
			});
			this.canvas.addEventListener('contextmenu', function (e) {
				if (!self.socket || !self.activeSession) return;
				
				var offset = Mstsc.elementOffset(self.canvas);
                var x = e.clientX - offset.left;
                var y = e.clientY - offset.top;

                if (x < 0 || y < 0) {
                    return;
                }
				self.socket.emit('mouse', x, y, mouseButtonMap(e.button), isMouseDown);
				e.preventDefault();
				return false;
			});
			this.canvas.addEventListener('DOMMouseScroll', function (e) {
				if (!self.socket || !self.activeSession) return;
				
				var isHorizontal = false;
				var delta = e.detail;
				var step = Math.round(Math.abs(delta) * 15 / 8);
				
				var offset = Mstsc.elementOffset(self.canvas);
                var x = e.clientX - offset.left;
                var y = e.clientY - offset.top;

                if (x < 0 || y < 0) {
                    return;
                }
				self.socket.emit('wheel', x, y, step, delta > 0, isHorizontal);
				e.preventDefault();
				return false;
			});
			this.canvas.addEventListener('mousewheel', function (e) {
				if (!self.socket || !self.activeSession) return;
				
				var isHorizontal = Math.abs(e.deltaX) > Math.abs(e.deltaY);
				var delta = isHorizontal?e.deltaX:e.deltaY;
				var step = Math.round(Math.abs(delta) * 15 / 8);
				
				var offset = Mstsc.elementOffset(self.canvas);
                var x = e.clientX - offset.left;
                var y = e.clientY - offset.top;

                if (x < 0 || y < 0) {
                    return;
                }
				self.socket.emit('wheel', x, y, step, delta > 0, isHorizontal);
				e.preventDefault();
				return false;
			});

            this.canvas.addEventListener("touchstart", handleTouch, true);
            this.canvas.addEventListener("touchend", handleTouch, true);
            this.canvas.addEventListener("touchcancel", handleTouch, true);
            this.canvas.addEventListener("touchmove", handleTouch, true);

            window.addEventListener('mouseup', function(e) {
                if (isMouseDown) {
                    isMouseDown = false;

                    var offset = Mstsc.elementOffset(self.canvas);
                    var x = e.clientX - offset.left;
                    var y = e.clientY - offset.top;

                    if (x < 0 || y < 0) {
                        return;
                    }
				    self.socket.emit('mouse', x, y, mouseButtonMap(e.button), false);
                }
            });
			
			// bind keyboard event
			window.addEventListener('keydown', function (e) {
				if (!self.socket || !self.activeSession) return;
				
				self.socket.emit('scancode', Mstsc.scancode(e), true);

				e.preventDefault();
				return false;
			});
			window.addEventListener('keyup', function (e) {
				if (!self.socket || !self.activeSession) return;
				
				self.socket.emit('scancode', Mstsc.scancode(e), false);
				
				e.preventDefault();
				return false;
			});


            function handleTouch(evt) {
                evt.preventDefault();
                if (evt.touches.length > 1 || (evt.type == "touchend" && evt.touches.length > 0))
                    return;

                var newEvt = document.createEvent("MouseEvents");
                var type = null;
                var touch = null;

                switch (evt.type) {
                    case "touchstart": 
                        type = "mousedown";
                        touch = evt.changedTouches[0];
                        break;
                    case "touchmove":
                        type = "mousemove";
                        touch = evt.changedTouches[0];
                        break;
                    case "touchend":        
                        type = "mouseup";
                        touch = evt.changedTouches[0];
                        break;
                    case "touchcancel":
                        type = "mouseup";
                        touch = evt.changedTouches[0];
                        break;
                }

                newEvt.initMouseEvent(type, true, true, self.canvas, 0,
                    touch.screenX, touch.screenY, touch.clientX, touch.clientY,
                    evt.ctrlKey, evt.altKey, evt.shiftKey, evt.metaKey, 0, null);
                self.canvas.dispatchEvent(newEvt);
            }
			
			return this;
		},
		/**
		 * connect
		 * @param ip {string} ip target for rdp
		 * @param domain {string} microsoft domain
		 * @param username {string} session username
		 * @param password {string} session password
		 * @param next {function} asynchrone end callback
		 */
		connect : function (ip, port, domain, username, password, onConnected, next) {
			// compute socket.io path (cozy cloud integration)
			var parts = document.location.pathname.split('/')
		      , base = parts.slice(0, parts.length - 1).join('/') + '/'
		      , path = base + 'socket.io';

			// start connection
			var self = this;
			this.socket = io(window.location.protocol + "//" + window.location.host, { "path": path }).on('rdp-connect', function() {
				// this event can be occured twice (RDP protocol stack artefact)
				console.log('[mstsc.js] connected');
				self.activeSession = true;
                onConnected();
			}).on('rdp-bitmap', function(bitmap) {
                if (self.activeSession) {
                    console.log('[mstsc.js] bitmap update bpp : ' + bitmap.bitsPerPixel);
                    self.render.update(bitmap);
                }
			}).on('rdp-close', function() {
                if (self.activeSession) {
                    next(null);
                    console.log('[mstsc.js] close');
                    self.activeSession = false;
                }
			}).on('rdp-error', function (err) {
                if (self.activeSession) {
                    next(err);
                    console.log('[mstsc.js] error : ' + err.code + '(' + err.message + ')');
                    self.activeSession = false;
                }
			});
			
			// emit infos event
			this.socket.emit('infos', {
				ip : ip, 
				port : port,
				screen : { 
					width : this.canvas.width, 
					height : this.canvas.height 
				}, 
				domain : domain, 
				username : username, 
				password : password, 
				locale : Mstsc.locale()
			});
		},
        disconnect: function() {
            if (!this.socket) {
                return;
            }
            this.socket.emit('disconnect');
            this.activeSession = false;
        }
	}
	
	Mstsc.client = {
		create : function (canvas) {
			return new Client(canvas);
		}
	}
})();
